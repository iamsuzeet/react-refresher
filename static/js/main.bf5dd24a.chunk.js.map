{"version":3,"sources":["App.module.css","components/cardList/CardList.module.css","components/cardList/card/Card.module.css","components/searchBox/SearchBox.module.css","components/cardList/card/Card.jsx","components/cardList/CardList.jsx","components/searchBox/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","monster","className","styles","src","id","alt","name","email","CardList","monsters","map","key","SearchBox","placeholder","changeHandler","Search","type","onChange","App","onInputChange","e","console","log","target","value","setState","searchValue","state","fetch","then","res","json","user","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIACAA,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,SAAW,6B,gBCA7BD,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,OAAS,4B,8NCEdC,EAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,yBAAKC,UAAWC,IAAOH,MACrB,yBACEI,IAAG,+BAA0BH,EAAQI,GAAlC,0BACHC,IAAI,YAEN,4BAAKL,EAAQM,MACb,2BAAIN,EAAQO,SCPLC,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACE,yBAAKR,UAAWC,IAAOM,UACpBC,EAASC,KAAI,SAAAV,GAAO,OACnB,kBAAC,EAAD,CAAMW,IAAKX,EAAQI,GAAIJ,QAASA,S,gBCL3BY,EAAY,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,cACvC,OACE,2BACEb,UAAWC,IAAOa,OAClBC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCsCDI,E,YAzCb,aAAe,IAAD,8BACZ,+CAaFC,cAAgB,SAAAC,GACdC,QAAQC,IAAIF,EAAEG,OAAOC,OAErB,EAAKC,SAAS,CACZC,YAAaN,EAAEG,OAAOC,SAhBxB,EAAKG,MAAQ,CACXlB,SAAU,GACViB,YAAa,IAJH,E,iFAQO,IAAD,OAClBE,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKP,SAAS,CAAEhB,SAAUuB,S,+BAWlC,IAAD,EAC2BC,KAAKN,MAA/BlB,EADD,EACCA,SAAUiB,EADX,EACWA,YACZQ,EAAmBzB,EAAS0B,QAAO,SAAAnC,GAAO,OAC9CA,EAAQM,KAAK8B,cAAcC,SAASX,MAGtC,OACE,yBAAKzB,UAAWC,IAAOgB,KACrB,gDACA,kBAAC,EAAD,CACEJ,cAAemB,KAAKd,cACpBN,YAAY,mBAEd,kBAAC,EAAD,CAAUJ,SAAUyB,S,GApCVI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.bf5dd24a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__26lwd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardList\":\"CardList_CardList__VTKGo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__1Rx8F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Search\":\"SearchBox_Search__1nGMU\"};","import React from \"react\";\r\nimport styles from \"./Card.module.css\";\r\n\r\nexport const Card = ({ monster }) => {\r\n  return (\r\n    <div className={styles.Card}>\r\n      <img\r\n        src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\r\n        alt=\"monster\"\r\n      />\r\n      <h1>{monster.name}</h1>\r\n      <p>{monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./CardList.module.css\";\r\nimport { Card } from \"./card/Card\";\r\n\r\nexport const CardList = ({ monsters }) => {\r\n  return (\r\n    <div className={styles.CardList}>\r\n      {monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./SearchBox.module.css\";\r\n\r\nexport const SearchBox = ({ placeholder, changeHandler }) => {\r\n  return (\r\n    <input\r\n      className={styles.Search}\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={changeHandler}\r\n    />\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\nimport styles from \"./App.module.css\";\nimport { CardList } from \"./components/cardList/CardList\";\nimport { SearchBox } from \"./components/searchBox/SearchBox\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchValue: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(user => this.setState({ monsters: user }));\n  }\n\n  onInputChange = e => {\n    console.log(e.target.value);\n\n    this.setState({\n      searchValue: e.target.value\n    });\n  };\n\n  render() {\n    const { monsters, searchValue } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchValue)\n    );\n\n    return (\n      <div className={styles.App}>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          changeHandler={this.onInputChange}\n          placeholder=\"search monster\"\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}